# https://github.com/crazy-max/diun/tree/master/.github/workflows
name: build

on: [push]

jobs:
  binary:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v5
        with:
          go-version: ^1.13

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4.1

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          version: latest
          args: release --skip-publish --rm-dist

      - uses: actions/upload-artifact@v4.3.1
        with:
          name: builds
          path: ./dist

      - # https://github.com/softprops/action-gh-release
        name: GitHub Release
        uses: softprops/action-gh-release@v2.0.2
        if: success() && startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: |
            dist/checksums.txt
            dist/*.tar.gz
            dist/*.zip
          name: ${{ steps.prepare.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: binary
    steps:
      - name: Prepare
        id: prepare
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo ::set-output name=version::${GITHUB_REF#refs/tags/v}
          else
            echo ::set-output name=version::snapshot
          fi
          echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386
          echo ::set-output name=docker_image::neverbehave/${{ github.event.repository.name }}
      - # https://github.com/crazy-max/ghaction-docker-buildx
        name: Set up Docker Buildx
        uses: crazy-max/ghaction-docker-buildx@v1
        with:
          version: latest
      - # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v2
      - name: Docker Buildx (no push)
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=false" \
            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
            --file Dockerfile .
      - name: Docker Login
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Buildx (push)
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=true" \
            --build-arg "VERSION=${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            --file Dockerfile .
      - name: Docker Check Manifest
        if: always() && startsWith(github.ref, 'refs/tags/v')
        run: |
          docker run --rm mplatform/mquery ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}
      - name: Clear
        if: always() && startsWith(github.ref, 'refs/tags/v')
        run: |
          rm -f ${HOME}/.docker/config.json
